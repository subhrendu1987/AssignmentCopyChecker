==> standard input <==
OS_LAB/pgm3.c
OS_LAB/pgm1.c
OS_LAB/pgm2.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    char command[] = "find /home/angel/Desktop/0s_lab -type f -name \"A*.txt\" | wc -l";		//Please give the path of the folder after 'find'
    
    int pipe_fd[2];
    if (pipe(pipe_fd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    pid_t pid = fork();

    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) 	//This is the child process executing
    {
        close(pipe_fd[0]);  
        dup2(pipe_fd[1], STDOUT_FILENO);  
        close(pipe_fd[1]);  
        system(command);  
        exit(EXIT_SUCCESS);
    } 
    else 		//This is the parent process executing
    {
        close(pipe_fd[1]);  
        char buffer[256];
        ssize_t bytes_read;

        while ((bytes_read = read(pipe_fd[0], buffer, sizeof(buffer))) > 0) {
            write(STDOUT_FILENO, buffer, bytes_read);  
        }

        close(pipe_fd[0]);
        wait(NULL);  
    }

    return 0;
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define MAX_BUFFER_SIZE 256
#define CPU_THRESHOLD 50.0
#define LOG_FILE "cpu_usage_log.txt"

void log_process_info(int pid, double cpu_utilized) {
    FILE *log_file = fopen(LOG_FILE, "a");
    if (log_file == NULL) {
        perror("Error opening log file");
        exit(EXIT_FAILURE);
    }

    fprintf(log_file, "%d,%.2lf%%\n", pid, cpu_utilized);
    fclose(log_file);
}

void check_and_kill_high_cpu_processes() {
    char buffer[MAX_BUFFER_SIZE];
    while (1) {
        // Run the ps command to get a list of processes and their CPU usage
        FILE *ps_output = popen("ps -eo pid,%cpu --sort=-%cpu", "r");
        if (ps_output == NULL) {
            perror("Error running ps command");
            exit(EXIT_FAILURE);
        }

        while (fgets(buffer, MAX_BUFFER_SIZE, ps_output) != NULL) {
            if (strstr(buffer, "PID") != NULL)
                continue;  // Skip the header line

            int pid;
            double cpu_usage;
            if (sscanf(buffer, "%d %lf", &pid, &cpu_usage) != 2)
                continue;  // Skip lines without PID and CPU usage information

            // Check if the CPU usage exceeds the threshold
            if (cpu_usage > CPU_THRESHOLD) {
                printf("Process %d is using %.2lf%% CPU. Killing the process...\n", pid, cpu_usage);

                // Kill the process
                char kill_command[MAX_BUFFER_SIZE];
                snprintf(kill_command, MAX_BUFFER_SIZE, "kill -9 %d", pid);
                system(kill_command);

                // Log the process information
                log_process_info(pid, cpu_usage);
            }
        }

        pclose(ps_output);

        // Sleep for 5 seconds before checking again
        sleep(5);
    }
}

int main() {
    // Create or clear the log file
    FILE *log_file = fopen(LOG_FILE, "w");
    if (log_file == NULL) {
        perror("Error creating log file");
        return EXIT_FAILURE;
    }
    fclose(log_file);

    // Start monitoring processes
    check_and_kill_high_cpu_processes();

    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
    const char* input_file = "input_numbers.txt";
    const char* output_file = "output_numbers.txt";
    FILE* input = fopen(input_file, "r");
    FILE* output = fopen(output_file, "w");

    // Check if the input file exists
    if (input == NULL) {
        printf("Input file not found: %s\n", input_file);
        return 1;
    }

    char line[256];
    while (fgets(line, sizeof(line), input)) {
        int number, base_input, base_conversion;
        if (sscanf(line, "%d%d%d", &number, &base_input, &base_conversion) == 3) {
            fprintf(output, "%d\n", number);
        } else {
            printf("Invalid input number: %s", line);
        }
    }

    fclose(input);
    fclose(output);

    printf("Conversion completed. Results are stored in %s.\n", output_file);
    return 0;
}

END 
